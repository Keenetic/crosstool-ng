diff --git a/libbacktrace/getpagesize.h b/libbacktrace/getpagesize.h
new file mode 100644
index 000000000..2a713e2a7
--- /dev/null
+++ b/libbacktrace/getpagesize.h
@@ -0,0 +1,42 @@
+/* getpagesize.h -- Public header file for stack backtrace library.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+
+    (1) Redistributions of source code must retain the above copyright
+    notice, this list of conditions and the following disclaimer.
+
+    (2) Redistributions in binary form must reproduce the above copyright
+    notice, this list of conditions and the following disclaimer in
+    the documentation and/or other materials provided with the
+    distribution.
+
+    (3) The name of the author may not be used to
+    endorse or promote products derived from this software without
+    specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
+INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
+STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
+IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.  */
+
+#ifndef GETPAGESIZE_H
+#define GETPAGESIZE_H
+
+#if defined(__linux__)
+#include <features.h>
+#if defined(__UCLIBC__)
+#undef getpagesize
+#define getpagesize() 4096
+#endif
+#endif
+
+#endif
diff --git a/libbacktrace/mmap.c b/libbacktrace/mmap.c
index dd7d519cc..eec5523c3 100644
--- a/libbacktrace/mmap.c
+++ b/libbacktrace/mmap.c
@@ -41,6 +41,7 @@ POSSIBILITY OF SUCH DAMAGE.  */
 
 #include "backtrace.h"
 #include "internal.h"
+#include "getpagesize.h"
 
 /* Memory allocation on systems that provide anonymous mmap.  This
    permits the backtrace functions to be invoked from a signal
diff --git a/libbacktrace/mmapio.c b/libbacktrace/mmapio.c
index 5dd39525b..0c1b15996 100644
--- a/libbacktrace/mmapio.c
+++ b/libbacktrace/mmapio.c
@@ -39,6 +39,7 @@ POSSIBILITY OF SUCH DAMAGE.  */
 
 #include "backtrace.h"
 #include "internal.h"
+#include "getpagesize.h"
 
 #ifndef MAP_FAILED
 #define MAP_FAILED ((void *)-1)
diff --git a/libsanitizer/asan/asan_linux.cpp b/libsanitizer/asan/asan_linux.cpp
index ce5e873dc..40c2c6b13 100644
--- a/libsanitizer/asan/asan_linux.cpp
+++ b/libsanitizer/asan/asan_linux.cpp
@@ -24,6 +24,7 @@
 #include "sanitizer_common/sanitizer_libc.h"
 #include "sanitizer_common/sanitizer_procmaps.h"
 
+#include <features.h>
 #include <sys/time.h>
 #include <sys/resource.h>
 #include <sys/mman.h>
@@ -138,7 +139,7 @@ void AsanApplyToGlobals(globals_op_fptr op, const void *needle) {
   UNIMPLEMENTED();
 }
 
-#if SANITIZER_ANDROID
+#if SANITIZER_ANDROID || defined(__UCLIBC__)
 // FIXME: should we do anything for Android?
 void AsanCheckDynamicRTPrereqs() {}
 void AsanCheckIncompatibleRT() {}
diff --git a/libsanitizer/interception/interception_linux.cpp b/libsanitizer/interception/interception_linux.cpp
index 950cd5126..dc8e371ca 100644
--- a/libsanitizer/interception/interception_linux.cpp
+++ b/libsanitizer/interception/interception_linux.cpp
@@ -64,7 +64,7 @@ bool InterceptFunction(const char *name, uptr *ptr_to_real, uptr func,
 }
 
 // Android and Solaris do not have dlvsym
-#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD
+#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD && !defined(__UCLIBC__)
 static void *GetFuncAddr(const char *name, const char *ver) {
   return dlvsym(RTLD_NEXT, name, ver);
 }
diff --git a/libsanitizer/interception/interception_linux.h b/libsanitizer/interception/interception_linux.h
index e578da0cf..a047d81f6 100644
--- a/libsanitizer/interception/interception_linux.h
+++ b/libsanitizer/interception/interception_linux.h
@@ -21,6 +21,10 @@
 #ifndef INTERCEPTION_LINUX_H
 #define INTERCEPTION_LINUX_H
 
+#if defined(__linux__)
+#include <features.h>
+#endif
+
 namespace __interception {
 bool InterceptFunction(const char *name, uptr *ptr_to_real, uptr func,
                        uptr wrapper);
@@ -36,7 +40,7 @@ bool InterceptFunction(const char *name, const char *ver, uptr *ptr_to_real,
       (::__interception::uptr) & WRAP(func))
 
 // Android,  Solaris and OpenBSD do not have dlvsym
-#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD
+#if !SANITIZER_ANDROID && !SANITIZER_SOLARIS && !SANITIZER_OPENBSD && !defined(__UCLIBC__)
 #define INTERCEPT_FUNCTION_VER_LINUX_OR_FREEBSD(func, symver) \
   ::__interception::InterceptFunction(                        \
       #func, symver,                                          \
diff --git a/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc b/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc
index 31ff48cfd..f75942ada 100644
--- a/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc
+++ b/libsanitizer/sanitizer_common/sanitizer_common_syscalls.inc
@@ -922,7 +922,7 @@ POST_SYSCALL(newfstat)(long res, long fd, void *statbuf) {
   }
 }
 
-#if !SANITIZER_ANDROID
+#if !SANITIZER_ANDROID && !defined(__UCLIBC__)
 PRE_SYSCALL(ustat)(long dev, void *ubuf) {}
 
 POST_SYSCALL(ustat)(long res, long dev, void *ubuf) {
@@ -930,7 +930,7 @@ POST_SYSCALL(ustat)(long res, long dev, void *ubuf) {
     if (ubuf) POST_WRITE(ubuf, struct_ustat_sz);
   }
 }
-#endif  // !SANITIZER_ANDROID
+#endif  // !SANITIZER_ANDROID && !__UCLIBC__
 
 PRE_SYSCALL(stat64)(const void *filename, void *statbuf) {
   if (filename)
diff --git a/libsanitizer/sanitizer_common/sanitizer_linux.cpp b/libsanitizer/sanitizer_common/sanitizer_linux.cpp
index 3807a79b1..f78f7d554 100644
--- a/libsanitizer/sanitizer_common/sanitizer_linux.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_linux.cpp
@@ -47,6 +47,7 @@
 #include <fcntl.h>
 #include <link.h>
 #include <pthread.h>
+#include <features.h>
 #include <sched.h>
 #include <signal.h>
 #include <sys/mman.h>
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h b/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h
index 61a6b82ef..db8a650d0 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h
@@ -567,7 +567,7 @@
 #define SANITIZER_INTERCEPT_GETUSERSHELL (SI_POSIX && !SI_ANDROID)
 #define SANITIZER_INTERCEPT_SL_INIT (SI_FREEBSD || SI_NETBSD)
 #define SANITIZER_INTERCEPT_CRYPT (SI_POSIX && !SI_ANDROID)
-#define SANITIZER_INTERCEPT_CRYPT_R (SI_LINUX && !SI_ANDROID)
+#define SANITIZER_INTERCEPT_CRYPT_R (SI_LINUX && !SI_ANDROID && !defined(__UCLIBC__))
 
 #define SANITIZER_INTERCEPT_GETRANDOM \
   ((SI_LINUX && __GLIBC_PREREQ(2, 25)) || SI_FREEBSD)
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp b/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp
index f22f50391..22d3f9652 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_linux.cpp
@@ -31,7 +31,7 @@
 // Also, for some platforms (e.g. mips) there are additional members in the
 // <sys/stat.h> struct stat:s.
 #include <linux/posix_types.h>
-#if defined(__x86_64__)
+#if defined(__x86_64__) || defined(__mips__)
 #include <sys/stat.h>
 #else
 #define ino_t __kernel_ino_t
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
index aa845df4d..6996b8aa9 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cpp
@@ -13,6 +13,10 @@
 
 #include "sanitizer_platform.h"
 
+#ifndef __GLIBC_PREREQ
+#define __GLIBC_PREREQ(x, y) 0
+#endif
+
 #if SANITIZER_LINUX || SANITIZER_MAC
 // Tests in this file assume that off_t-dependent data structures match the
 // libc ABI. For example, struct dirent here is what readdir() function (as
@@ -58,7 +62,9 @@
 #endif
 
 #if !SANITIZER_ANDROID
+#if !defined(__UCLIBC__)
 #include <fstab.h>
+#endif
 #include <sys/mount.h>
 #include <sys/timeb.h>
 #include <utmpx.h>
@@ -116,7 +122,9 @@ typedef struct user_fpregs elf_fpregset_t;
 #include <net/if_ppp.h>
 #include <netax25/ax25.h>
 #include <netipx/ipx.h>
+#if !defined(__UCLIBC__)
 #include <netrom/netrom.h>
+#endif
 #if HAVE_RPC_XDR_H
 # include <rpc/xdr.h>
 #endif
@@ -130,6 +138,9 @@ typedef struct user_fpregs elf_fpregset_t;
 # include <sys/procfs.h>
 #endif
 #include <sys/user.h>
+#if !defined(__UCLIBC__) && !__GLIBC_PREREQ(2, 28)
+ #include <sys/ustat.h>
+#endif
 #include <linux/cyclades.h>
 #include <linux/if_eql.h>
 #include <linux/if_plip.h>
@@ -200,12 +211,12 @@ namespace __sanitizer {
   unsigned struct_statfs64_sz = sizeof(struct statfs64);
 #endif // SANITIZER_MAC && !SANITIZER_IOS
 
-#if !SANITIZER_ANDROID
+#if !SANITIZER_ANDROID && !defined(__UCLIBC__)
   unsigned struct_fstab_sz = sizeof(struct fstab);
   unsigned struct_statfs_sz = sizeof(struct statfs);
   unsigned struct_sockaddr_sz = sizeof(struct sockaddr);
   unsigned ucontext_t_sz = sizeof(ucontext_t);
-#endif // !SANITIZER_ANDROID
+#endif // !SANITIZER_ANDROID && !defined(__UCLIBC__)
 
 #if SANITIZER_LINUX
   unsigned struct_epoll_event_sz = sizeof(struct epoll_event);
@@ -241,7 +252,9 @@ namespace __sanitizer {
   unsigned struct_ustat_sz = SIZEOF_STRUCT_USTAT;
   unsigned struct_rlimit64_sz = sizeof(struct rlimit64);
   unsigned struct_statvfs64_sz = sizeof(struct statvfs64);
+#if !defined(__UCLIBC__)
   unsigned struct_crypt_data_sz = sizeof(struct crypt_data);
+#endif
 #endif // SANITIZER_LINUX && !SANITIZER_ANDROID
 
 #if SANITIZER_LINUX && !SANITIZER_ANDROID
@@ -455,7 +468,9 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
   unsigned struct_kbkeycode_sz = sizeof(struct kbkeycode);
   unsigned struct_kbsentry_sz = sizeof(struct kbsentry);
   unsigned struct_mtconfiginfo_sz = sizeof(struct mtconfiginfo);
+#if !defined(__UCLIBC__)
   unsigned struct_nr_parms_struct_sz = sizeof(struct nr_parms_struct);
+#endif
   unsigned struct_scc_modem_sz = sizeof(struct scc_modem);
   unsigned struct_scc_stat_sz = sizeof(struct scc_stat);
   unsigned struct_serial_multiport_struct_sz
@@ -889,10 +904,12 @@ unsigned struct_ElfW_Phdr_sz = sizeof(Elf_Phdr);
   unsigned IOCTL_SIOCAX25SETPARMS = SIOCAX25SETPARMS;
   unsigned IOCTL_SIOCDEVPLIP = SIOCDEVPLIP;
   unsigned IOCTL_SIOCIPXCFGDATA = SIOCIPXCFGDATA;
+#if !defined(__UCLIBC__)
   unsigned IOCTL_SIOCNRDECOBS = SIOCNRDECOBS;
   unsigned IOCTL_SIOCNRGETPARMS = SIOCNRGETPARMS;
   unsigned IOCTL_SIOCNRRTCTL = SIOCNRRTCTL;
   unsigned IOCTL_SIOCNRSETPARMS = SIOCNRSETPARMS;
+#endif
   unsigned IOCTL_TIOCGSERIAL = TIOCGSERIAL;
   unsigned IOCTL_TIOCSERGETMULTI = TIOCSERGETMULTI;
   unsigned IOCTL_TIOCSERSETMULTI = TIOCSERSETMULTI;
@@ -1227,7 +1244,7 @@ COMPILER_CHECK(__sanitizer_XDR_DECODE == XDR_DECODE);
 COMPILER_CHECK(__sanitizer_XDR_FREE == XDR_FREE);
 #endif
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && !defined(__UCLIBC__)
 COMPILER_CHECK(sizeof(__sanitizer_FILE) <= sizeof(FILE));
 CHECK_SIZE_AND_OFFSET(FILE, _flags);
 CHECK_SIZE_AND_OFFSET(FILE, _IO_read_ptr);
diff --git a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
index d82fd5e40..faeb5c159 100644
--- a/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
+++ b/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
@@ -19,6 +19,10 @@
 #include "sanitizer_internal_defs.h"
 #include "sanitizer_platform.h"
 
+#ifdef __linux__
+#include <features.h>
+#endif
+
 #if defined(__sparc__)
 // FIXME: This can't be included from tsan which does not support sparc yet.
 #include "sanitizer_glibc_version.h"
@@ -80,9 +84,17 @@ const unsigned struct_kernel_stat64_sz = 104;
 const unsigned struct_kernel_stat_sz = 144;
 const unsigned struct_kernel_stat64_sz = 104;
 #elif defined(__mips__)
+#if defined(__UCLIBC__)
+#if defined(__USE_FILE_OFFSET64)
+  const unsigned struct_kernel_stat_sz = 160;
+#else
+  const unsigned struct_kernel_stat_sz = 152;
+#endif
+#else
 const unsigned struct_kernel_stat_sz = SANITIZER_ANDROID
                                            ? FIRST_32_SECOND_64(104, 128)
                                            : FIRST_32_SECOND_64(144, 216);
+#endif
 const unsigned struct_kernel_stat64_sz = 104;
 #elif defined(__s390__) && !defined(__s390x__)
 const unsigned struct_kernel_stat_sz = 64;
@@ -191,7 +203,9 @@ struct __sanitizer_struct_mallinfo {
   int v[10];
 };
 
+#if !defined(__UCLIBC__)
 extern unsigned struct_ustat_sz;
+#endif
 extern unsigned struct_rlimit64_sz;
 extern unsigned struct_statvfs64_sz;
 
@@ -552,11 +566,23 @@ typedef unsigned long __sanitizer_sigset_t;
 #elif SANITIZER_MAC
 typedef unsigned __sanitizer_sigset_t;
 #elif SANITIZER_LINUX
+
+#if defined(__UCLIBC__)
+#if defined(__mips__)
+#define _SIGSET_NWORDS (128/(8*sizeof(unsigned long)))
+#else
+#define _SIGSET_NWORDS (64/(8*sizeof(unsigned long)))
+#endif
+struct __sanitizer_sigset_t {
+  unsigned long __val[_SIGSET_NWORDS];
+};
+#else
 struct __sanitizer_sigset_t {
   // The size is determined by looking at sizeof of real sigset_t on linux.
   uptr val[128 / sizeof(uptr)];
 };
 #endif
+#endif
 
 struct __sanitizer_siginfo {
   // The size is determined by looking at sizeof of real siginfo_t on linux.
@@ -598,7 +624,17 @@ struct __sanitizer_sigaction {
   uptr sa_flags;
   void (*sa_restorer)();
 };
-#else // !SANITIZER_ANDROID
+#elif defined(__mips__) && defined(__UCLIBC__)
+struct __sanitizer_sigaction {
+  unsigned sa_flags;
+  union {
+    void (*handler)(int sig);
+    void (*sigaction)(int sig, __sanitizer_siginfo *info, void *uctx);
+  };
+  __sanitizer_sigset_t sa_mask;
+  void (*sa_restorer)();
+};
+#else // !SANITIZER_ANDROID && !(__mips__ && __UCLIBC__)
 struct __sanitizer_sigaction {
 #if defined(__mips__) && !SANITIZER_FREEBSD
   unsigned int sa_flags;
@@ -770,7 +806,7 @@ struct __sanitizer_wordexp_t {
   uptr we_offs;
 };
 
-#if SANITIZER_LINUX && !SANITIZER_ANDROID
+#if SANITIZER_LINUX && !SANITIZER_ANDROID && !defined(__UCLIBC__)
 struct __sanitizer_FILE {
   int _flags;
   char *_IO_read_ptr;
@@ -982,7 +1018,9 @@ extern unsigned struct_kbentry_sz;
 extern unsigned struct_kbkeycode_sz;
 extern unsigned struct_kbsentry_sz;
 extern unsigned struct_mtconfiginfo_sz;
+#if !defined(__UCLIBC__)
 extern unsigned struct_nr_parms_struct_sz;
+#endif
 extern unsigned struct_scc_modem_sz;
 extern unsigned struct_scc_stat_sz;
 extern unsigned struct_serial_multiport_struct_sz;
@@ -1393,10 +1431,12 @@ extern unsigned IOCTL_SIOCAX25NOUID;
 extern unsigned IOCTL_SIOCAX25SETPARMS;
 extern unsigned IOCTL_SIOCDEVPLIP;
 extern unsigned IOCTL_SIOCIPXCFGDATA;
+#if !defined(__UCLIBC__)
 extern unsigned IOCTL_SIOCNRDECOBS;
 extern unsigned IOCTL_SIOCNRGETPARMS;
 extern unsigned IOCTL_SIOCNRRTCTL;
 extern unsigned IOCTL_SIOCNRSETPARMS;
+#endif
 extern unsigned IOCTL_SNDCTL_DSP_GETISPACE;
 extern unsigned IOCTL_SNDCTL_DSP_GETOSPACE;
 extern unsigned IOCTL_TIOCGSERIAL;
